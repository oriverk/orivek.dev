---
import { getCollection } from "astro:content";
import PostCard from "@/components/PostCard.svelte";
import PostPagination from "@/components/PostPagination.svelte";
import ContentWrapper from "@/components/ui/ContentWrapper.svelte";
import Layout from "@/layouts/Layout.astro";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";

export const getStaticPaths = (async ({ paginate }) => {
  const blogCollection = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? data.published : true;
  });

  const posts = blogCollection.sort((a, b) => {
    return (
      new Date(b.data.update ?? b.data.create).getTime() -
      new Date(a.data.update ?? a.data.create).getTime()
    );
  });

  const tags = posts.flatMap((post) => post.data.tags ?? []);
  return [...new Set(tags)].flatMap((tag) => {
    const blogWithTag = posts.filter((post) => post.data.tags.includes(tag));
    return paginate(blogWithTag, { params: { tag }, pageSize: 12 });
  });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const { page } = Astro.props as Props;
const { tag } = Astro.params as Params;
const { data, ...rest } = page;
---

<Layout title={`#${tag} blog`}>
  <ContentWrapper>
    <h1><span>#{tag}</span> Blog</h1>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
    <div class="blog">
      {
        data.map((post) => {
          const { id, slug, data } = post;
          const { update, ...rest } = data;
          const href = `/blog/${id}`;
          return <PostCard {href} update={update} {...rest} />;
        })
      }
    </div>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
  </ContentWrapper>
</Layout>

<style>
  h1 span {
    color: rgb(var(--color-miku));
  }

  .blog {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill, minmax(256px, 1fr));
  }

  .pagination {
    display: flex;
    justify-content: space-evenly;
  }
</style>
