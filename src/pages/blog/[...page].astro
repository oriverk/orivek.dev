---
import { getCollection } from "astro:content";
import PostCard from "@/components/PostCard.svelte";
import PostPagination from "@/components/PostPagination.svelte";
import ContentWrapper from "@/components/ui/ContentWrapper.svelte";
import Layout from "@/layouts/Layout.astro";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async ({ paginate }) => {
  const blogCollection = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? data.published : true;
  });

  const posts = blogCollection.sort((a, b) => {
    return (
      new Date(b.data.update ?? b.data.create).getTime() -
      new Date(a.data.update ?? a.data.create).getTime()
    );
  });
  return paginate(posts, { pageSize: 12 });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { page } = Astro.props as Props;
const { data, ...rest } = page;
---

<Layout title="blog">
  <ContentWrapper>
    <h1>Blog</h1>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
    <div class="blog">
      {data.map(({id, data}) => {
        const { update, ...rest } = data;
        const href = `/blog/${id}`
        return (
          <PostCard {href} update={update} {...rest} />
        )
      })}
    </div>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
  </ContentWrapper>
</Layout>

<style>
  .blog {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill,minmax(256px,1fr));
  }

  .pagination {
    display: flex;
    justify-content: space-evenly;
  }
</style>
