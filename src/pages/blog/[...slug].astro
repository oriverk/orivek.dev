---
import { render } from "astro:content";
import PostTag from "@/components/PostTag.svelte";
import AstroLink from "@/components/markdown/AstroLink.astro";
import ContentWrapper from "@/components/ui/ContentWrapper.svelte";
import Details from "@/components/ui/Details.svelte";
import Markdown from "@/components/ui/Markdown.svelte";
import Toc from "@/components/ui/Toc/index.svelte";
import Layout from "@/layouts/Layout.astro";
import { getOgImageSrc } from "@/pages/api/og/[...path]";
import { getBlog, getTocHierarchy } from "@/utils/getBlog";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
  const blog = await getBlog();
  const result = blog.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
  return result;
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { post } = Astro.props as Props;
const { data } = post;
const { title, description, tags, create, update, image, noindex } = data;
const lastModified = update || create;
const date = lastModified.toLocaleDateString("ja-JP", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
const isoDate = lastModified.toISOString();
const { Content, headings } = await render(post);
const toc = getTocHierarchy(headings);
const { origin, pathname } = Astro.url;
const ogImage = getOgImageSrc(origin, pathname);

export const components = {
  a: AstroLink,
};
---

<Layout {title} {description} image={ogImage} pagefind={true} {noindex}>
  <article>
    <ContentWrapper>
      <div class="container">
        <div>
          <h1>{title}</h1>
          <div class="info">
            <time datetime={isoDate} data-pagefind-meta={`date:${isoDate}`}>{date}</time>
            {!!tags.length && (
              <>
                <span>/</span>
                <div class="tags">
                  {tags.map(tag => <PostTag {tag} href={`/blog/tags/${tag}`} />)}
                </div>
              </>
            )}
          </div>
        </div>
        <nav>
          <Details summary="TOC">
            <Toc {toc} />
          </Details>
        </nav>
        <Markdown>
          <Content {components} />
        </Markdown>
        </div>
    </ContentWrapper>
  </article>
</Layout>

<script is:inline>
  if(document.getElementsByClassName("twitter-tweet").length){
    const script = document.createElement("script");
    script.src = "https://platform.twitter.com/widgets.js";
    document.body.appendChild(script);
    script.remove()
  }
</script>

<style>
  .container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  h1 {
    text-align: center;
  }
  .info {
    margin-inline: auto;
  }
  .info, .tags {
    display: flex;
    gap: .5rem;
  }

</style>


